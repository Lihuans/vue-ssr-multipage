const fs = require("fs");
const path = require("path");
const LRU = require("lru-cache");
const express = require("express");
const favicon = require("serve-favicon");
const compression = require("compression");
const microcache = require("route-cache");
const isMobile = require("is-mobile");
const resolve = file => path.resolve(__dirname, file);
const { createBundleRenderer } = require("vue-server-renderer")
const router = require('./server/router');
// const logger = require('./log');

const isProd = process.env.NODE_ENV === "production";
const useMicroCache = process.env.MICRO_CACHE !== "false";
const serverInfo =
  `express/${require("express/package.json").version} ` +
  `vue-server-renderer/${require("vue-server-renderer/package.json").version}`;
const modules = require("./build/module-config");
const mods = process.env.END_ENV ? [process.env.END_ENV] : modules;
console.log(process.env.END_ENV,mods);

const app = express();

// app.use(logger({}));

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15
      }),
      // this is only needed when vue-server-renderer is npm-linked
      // basedir: resolve("./dist"),
      // recommended for performance
      runInNewContext: false
    })
  );
}

function resolveModule(...arg) {
  return path.join(__dirname, "modules", ...arg);
}

function genTemplatePath(moduleName) {
  return resolveModule(moduleName, "src/index.template.html");
}

/**
 * 根据req中的ua判断是pc还是移动端
 * @return 'mobile'|'desktop'
 */
function getModuleNameByReq(req) {
  return isMobile({ ua: req.headers["user-agent"] }) ? "mobile" : "desktop";
}

let renderer = {};
let readyPromise = {};
mods.forEach(moduleName => {
  if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const template = fs.readFileSync(genTemplatePath(moduleName), "utf-8");
    const bundle = require(resolveModule(
      moduleName,
      "dist/vue-ssr-server-bundle.json"
    ));
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require(resolveModule(
      moduleName,
      "dist/vue-ssr-client-manifest.json"
    ));
    renderer[moduleName] = createRenderer(bundle, {
      template,
      clientManifest
    });
  } else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise[moduleName] = require("./build/setup-dev-server")(
      moduleName,
      app,
      genTemplatePath(moduleName),
      (bundle, options) => {
        renderer[moduleName] = createRenderer(bundle, options);
      }
    );
  }
});

const serve = (path, cache) =>
  express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
  });

app.use(compression({ threshold: 0 }));
app.use(favicon("./public/img/favicon.ico"));
app.use("/public", serve("./public", true));
app.use("/manifest.json", serve("./manifest.json", true));
app.use("/dist", (req, res) => {
  const moduleName = getModuleNameByReq(req);

  serve(`./modules/${moduleName}/dist`, true)(req, res);
});
app.use("/service-worker.js", (req, res) => {
  const moduleName = getModuleNameByReq(req);

  serve(`./modules/${moduleName}/dist/service-worker.js`, true)(req, res);
});

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

function render(moduleName, req, res) {
  const s = Date.now();

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

  const handleError = err => {
    console.log('====',err.code);
    if (err.url) {
      res.redirect(err.url);
    } else if(err.code === 401){
      res.redirect('/logins');
    } else if (err.code === 404) {
      res.status(404).send("404 | Page Not Found");
    } else {
      // Render Error Page or Redirect
      res.status(500).send("500 | Internal Server Error");
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  };

  const context = {
    title: "Vue HN 2.0", // default title
    url: req.url
  };
  renderer[moduleName].renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }
    res.send(html);
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`);
    }
  });
}

// app.use('/api',router);
app.use(router);

app.get("*", (req, res) => {
  // console.log('---=-===',res)
  const moduleName = getModuleNameByReq(req);

  if (isProd) {
    render(moduleName, req, res);
  } else {
    readyPromise[moduleName].then(() => render(moduleName, req, res));
  }
});

const port = process.env.PORT || 8003;
app.listen(port, () => {
  console.log(`server started at localhost:${port}`);
});
